// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Tabla USERS

model User {
  id       String  @id @default(uuid()) @db.Uuid
  name     String
  email    String  @unique
  password String
  googleId String? @map("google_id")
  imageUrl String? @map("image_url")
  provider String

  accounts Account[]
  sessions Session[]

  @@map("users")
}

// Tabla CUSTOMERS

model Customer {
  id       String @id @default(uuid()) @db.Uuid
  name     String
  email    String
  imageUrl String @map("image_url")

  invoices Invoice[]

  @@map("customers")
}

// Tabla INVOICES

model Invoice {
  id         String   @id @default(uuid()) @db.Uuid
  customerId String   @map("customer_id")
  amount     Int
  status     String
  date       DateTime

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

// Tabla REVENUE

model Revenue {
  month   String @id
  revenue Int

  @@map("revenue")
}

// Tabla ACCOUNTS (NextAuth)

model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @map("user_id") @db.Uuid
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Tabla SESSIONS (NextAuth)

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Tabla VERIFICATIONTOKENS (NextAuth)

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
